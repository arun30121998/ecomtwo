{"version":3,"file":"static/js/383.084aecfb.chunk.js","mappings":"oNAKMA,EAAO,SAAHC,GAaH,IAZLC,EAAMD,EAANC,OACAC,EAAQF,EAARE,SACAC,EAAWH,EAAXG,YACAC,EAAcJ,EAAdI,eACAC,EAAQL,EAARK,SACAC,EAAMN,EAANM,OACAC,EAAWP,EAAXO,YACAC,EAAcR,EAAdQ,eACAC,EAAiBT,EAAjBS,kBACAC,EAAcV,EAAdU,eACAC,EAAaX,EAAbW,cACAC,EAAaZ,EAAbY,cAOA,OACEC,EAAAA,EAAAA,MAAA,QAAMX,SAAUA,EAASY,SAAA,CACtBb,EAAOc,KAAI,SAACC,GAAK,OAChBH,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEG,EAAAA,EAAAA,KAAA,SACEC,UAAU,cACVC,QAASH,EAAMI,KAAKN,SAEnBE,EAAMK,SAETJ,EAAAA,EAAAA,KAAA,SAAAK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEJ,UAAU,+BACNb,EAASW,EAAMI,KAAMJ,EAAMO,aAAW,IAC1C,eAAcjB,EAAOU,EAAMI,MAAQ,OAAS,WAE7Cd,EAAOU,EAAMI,QACZH,EAAAA,EAAAA,KAAA,KACEC,UAAU,uBACVM,KAAK,QAAOV,SAEXR,EAAOU,EAAMI,MAAMK,YAjBhBT,EAAMI,KAoBV,IAIPZ,IACCK,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEG,EAAAA,EAAAA,KAAA,SACEC,UAAU,cACVC,QAAQ,cAAaL,SACtB,mBAGDG,EAAAA,EAAAA,KAACS,IAAU,CACTR,UAAU,GACVS,QAAS,KACTP,KAAK,cACLQ,MAAOzB,EACP0B,SA7CqB,SAACD,GAE9BxB,EAAewB,EACjB,EA2CUE,WAAY,CACVV,KAAM,cACNW,UAAU,QAKjBtB,IACCI,EAAAA,EAAAA,MAAA,OAAKK,UAAU,wCAAuCJ,SAAA,EACpDD,EAAAA,EAAAA,MAAA,OAAKK,UAAU,0BAAyBJ,SAAA,EACtCG,EAAAA,EAAAA,KAAA,SACEe,KAAK,WACLZ,KAAK,GACLa,GAAG,MAELhB,EAAAA,EAAAA,KAAA,KAAAH,SAAG,kCAELG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYJ,UACzBG,EAAAA,EAAAA,KAAA,KACEiB,QAASxB,EACTQ,UAAU,kBAAiBJ,SAE1BH,UAKTM,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeJ,SAAEF,KAE9BK,EAAAA,EAAAA,KAAA,UACEC,UAAU,6BACVc,KAAK,SAAQlB,SAEZP,MAIT,C,iMC/Fe,SAAS4B,IAEtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAsCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3CzC,EAAW0C,EAAA,GAAEzC,EAAcyC,EAAA,GAClCC,GAKIC,EAAAA,EAAAA,MAJF1C,EAAQyC,EAARzC,SACA2C,EAAYF,EAAZE,aACa1C,EAAMwC,EAAnBG,UAAa3C,OACb4C,EAAKJ,EAALI,MAEIhD,EAAQ,eAAAF,GAAAmD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAI,IAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAKxB,OALwBF,EAAAC,KAAA,EAGlBJ,GAAQlC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQiC,GAAI,IAAEpD,YAAAA,IAE5BwD,EAAAE,KAAA,GACuBC,EAAAA,EAAAA,IAAaN,GAAU,KAAD,EAAvCC,EAAQE,EAAAI,KAEdC,QAAQC,IAAI,+BAAgCR,GAE5CP,IACA9C,EAAe,IAAIuD,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAO,GAAAP,EAAA,SAGnBK,QAAQtB,MAAM,yBAAwBiB,EAAAO,IAChB,4DAAlBP,EAAAO,GAAMzC,SACRkB,EAAS,2DAMV,yBAAAgB,EAAAQ,OAAA,GAAAb,EAAA,mBAEJ,gBAxBac,GAAA,OAAApE,EAAAqE,MAAA,KAAAC,UAAA,KA0Ed,OACErD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOJ,UACpBD,EAAAA,EAAAA,MAAA,OAAKK,UAAU,kDAAiDJ,SAAA,EAC9DG,EAAAA,EAAAA,KAAA,MAAAH,SAAI,mBACJG,EAAAA,EAAAA,KAAClB,EAAAA,EAAI,CACHE,OArDW,CACjB,CACEmB,KAAM,WACNC,MAAO,cACPE,WAAY,CACVQ,SAAU,yBACVwC,QAAS,CACP3C,MAAO,eACPH,QAAS,0DAEX+C,UAAW,CACT5C,MAAO,GACPH,QAAS,gDAIf,CACEL,KAAM,QACNC,MAAO,SACPE,WAAY,CACVQ,SAAU,oBACVwC,QAAS,CACP3C,MAAO,oDACPH,QAAS,wBAEX+C,UAAW,CACT5C,MAAO,IACPH,QAAS,4CAIf,CACEL,KAAM,WACNC,MAAO,YACPE,WAAY,CACVQ,SAAU,uBACVwC,QAAS,CAEP9C,QAAS,oFAEX+C,UAAW,CACT5C,MAAO,GACPH,QAAS,+CAYTvB,SAAU8C,EAAa9C,GACvBC,YAAaA,EACbC,eAAgBA,EAChBC,SAAUA,EACVC,OAAQA,EACRC,YAAY,SACZC,gBAAgB,EAChBC,mBAAmB,EACnBE,cAAc,aACdD,eAAgB,kBAAM0B,EAAS,aAAa,EAC5CxB,cAAe8B,IACd,QAKX,C,sHC/GaoB,EAAY,eAAA9D,GAAAmD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOmB,GAAgB,IAAAhB,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAExBa,EAAAA,EAAMC,KAAK,qCAAsCF,GAAkB,KAAD,EAA3E,OAARhB,EAAQE,EAAAI,KAAAJ,EAAAiB,OAAA,SACPnB,EAASF,MAAI,UAAAI,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,UAGhBA,EAAAO,GAAMT,UAAsC,MAA1BE,EAAAO,GAAMT,SAASoB,OAAc,CAAAlB,EAAAE,KAAA,eAC3C,IAAIiB,MAAM,2DAA2D,KAAD,SAGtE,IAAIA,MAAM,4CAA4C,KAAD,oBAAAnB,EAAAQ,OAAA,GAAAb,EAAA,kBAE9D,gBAZwBc,GAAA,OAAApE,EAAAqE,MAAA,KAAAC,UAAA,KAcZS,EAAS,eAAAC,GAAA7B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA4B,EAAOC,GAAS,IAAAzB,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,cAAAsB,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,EAEZa,EAAAA,EAAMC,KAAK,kCAAmCO,GAAW,KAAD,EAAjE,OAARzB,EAAQ0B,EAAApB,KAAAoB,EAAAP,OAAA,SAIPnB,EAASF,MAAI,aAAA4B,EAAAvB,KAAA,EAAAuB,EAAAjB,GAAAiB,EAAA,SAEdA,EAAAjB,GAAMT,SAASF,KAAK,KAAD,oBAAA4B,EAAAhB,OAAA,GAAAc,EAAA,kBAE9B,gBAVqBG,GAAA,OAAAJ,EAAAX,MAAA,KAAAC,UAAA,I","sources":["Components/Form/DemoForm.js","Pages/Profile/RegisterForm.js","services/api.js"],"sourcesContent":["import React from \"react\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"./Form.css\";\r\n\r\nconst Form = ({\r\n  fields,\r\n  onSubmit,\r\n  phoneNumber,\r\n  setPhoneNumber,\r\n  register,\r\n  errors,\r\n  labelButton,\r\n  showPhoneInput,\r\n  showCheckboxInput,\r\n  handleNavigate,\r\n  labelNavigate,\r\n  errorMessaage,\r\n}) => {\r\n  const handlePhoneInputChange = (value) => {\r\n    // Update the phone number state\r\n    setPhoneNumber(value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      {fields.map((field) => (\r\n        <div key={field.name}>\r\n          <label\r\n            className='input-label'\r\n            htmlFor={field.name}\r\n          >\r\n            {field.label}\r\n          </label>\r\n          <input\r\n            className='border-2   validation-input'\r\n            {...register(field.name, field.validation)}\r\n            aria-invalid={errors[field.name] ? \"true\" : \"false\"}\r\n          />\r\n          {errors[field.name] && (\r\n            <p\r\n              className='m-0 form-erroe-style'\r\n              role='alert'\r\n            >\r\n              {errors[field.name].message}\r\n            </p>\r\n          )}\r\n        </div>\r\n      ))}\r\n\r\n      {/* Conditionally render PhoneInput based on the \"showPhoneInput\" prop */}\r\n      {showPhoneInput && (\r\n        <div>\r\n          <label\r\n            className='input-label'\r\n            htmlFor='phoneNumber'\r\n          >\r\n            Phone Number:\r\n          </label>\r\n          <PhoneInput\r\n            className=''\r\n            country={\"in\"}\r\n            name='phoneNumber'\r\n            value={phoneNumber}\r\n            onChange={handlePhoneInputChange}\r\n            inputProps={{\r\n              name: \"phoneNumber\",\r\n              required: true, // Add the required attribute for built-in validation\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n      {showCheckboxInput && (\r\n        <div className=' d-flex justify-between form-checkbox'>\r\n          <div className='d-flex    form-checkbox'>\r\n            <input\r\n              type='checkbox'\r\n              name=''\r\n              id=''\r\n            />\r\n            <p>Accept Terms & Conditions</p>\r\n          </div>\r\n          <div className='login-link'>\r\n            <p\r\n              onClick={handleNavigate}\r\n              className=' cursor-pointer'\r\n            >\r\n              {labelNavigate}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <p className=' text-red-500'>{errorMessaage}</p>\r\n\r\n      <button\r\n        className='validation-form-btn w-full'\r\n        type='submit'\r\n      >\r\n        {labelButton}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport { Form };\r\n","import React, { useState } from \"react\";\r\nimport { Form } from \"../../Components/Form/DemoForm\";\r\nimport { registerUser } from \"../../services/api\"; // Import the registerUser function\r\nimport { useForm } from \"react-hook-form\";\r\nimport \"./Profile.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n//\r\nexport default function RegisterForm() {\r\n\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState('')\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm();\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      // Include the phone number in the form data\r\n      const formData = { ...data, phoneNumber };\r\n\r\n      // Call the registerUser function and pass the form data to it\r\n      const response = await registerUser(formData);\r\n      // Handle the response from the server\r\n      console.log(\"Form submitted successfully:\", response);\r\n      // You can also display a success message to the user if needed\r\n      reset(); // Reset the form fields to their initial values\r\n      setPhoneNumber(\"\"); \r\n    } catch (error) {\r\n      // Handle any errors that occur during form submission\r\n      console.error(\"Error submitting form:\", error);\r\n      if (error.message === \"User with the same email or phone number already exists\") {\r\n        setError(\"User with the same email or phone number already exists\")\r\n        // Display a message indicating that the user is already registered\r\n        // You can set this message to the 'error' state and display it on the form\r\n      } else {\r\n        // Display a generic error message indicating that something went wrong\r\n        // You can set this message to the 'error' state and display it on the form\r\n      }\r\n    }\r\n  };\r\n\r\n  const formFields = [\r\n    {\r\n      name: \"fullName\",\r\n      label: \"First Name:\",\r\n      validation: {\r\n        required: \"First name is required\",\r\n        pattern: {\r\n          value: /^[A-Za-z]+$/i,\r\n          message: \"First name should contain only alphabetical characters\",\r\n        },\r\n        maxLength: {\r\n          value: 20,\r\n          message: \"First name should not exceed 10 characters\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: \"email\",\r\n      label: \"Email:\",\r\n      validation: {\r\n        required: \"Email is required\",\r\n        pattern: {\r\n          value: /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/i,\r\n          message: \"Invalid email format\",\r\n        },\r\n        maxLength: {\r\n          value: 100,\r\n          message: \"Email should not exceed 100 characters\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: \"password\",\r\n      label: \"Password:\",\r\n      validation: {\r\n        required: \"Password is required\",\r\n        pattern: {\r\n          // value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\r\n          message: \"Password must contain at least 8 characters, including both letters and numbers.\",\r\n        },\r\n        maxLength: {\r\n          value: 50, // Adjust the maximum length as per your requirement\r\n          message: \"Password should not exceed 50 characters\",\r\n        },\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className='mt-10'>\r\n      <div className='col-12 col-lg-4  m-auto registration-from-style'>\r\n        <h1>Register Here</h1>\r\n        <Form\r\n          fields={formFields}\r\n          onSubmit={handleSubmit(onSubmit)}\r\n          phoneNumber={phoneNumber}\r\n          setPhoneNumber={setPhoneNumber}\r\n          register={register}\r\n          errors={errors}\r\n          labelButton='Submit'\r\n          showPhoneInput={true}\r\n          showCheckboxInput={true}\r\n          labelNavigate='Login Here'\r\n          handleNavigate={() => navigate(\"/userLogin\")}\r\n          errorMessaage={error}\r\n        />{\" \"}\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","// services/api.js\r\nimport axios from 'axios';\r\n\r\nexport const registerUser = async (registrationData) => {\r\n  try {\r\n    const response = await axios.post('http://localhost:3002/api/register', registrationData);\r\n    return response.data;\r\n  } catch (error) {\r\n    // If the API responds with a 409 status, it means the user is already registered\r\n    if (error.response && error.response.status === 409) {\r\n      throw new Error(\"User with the same email or phone number already exists\");\r\n    }\r\n\r\n    throw new Error(\"Something went wrong during registration\");\r\n  }\r\n};\r\n\r\nexport const loginUser = async (loginData) => { // Pass setUser function from UserContextProvider\r\n    try {\r\n      const response = await axios.post('http://localhost:3002/api/login', loginData);\r\n  \r\n      // Store the user details in the UserContext\r\n  \r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response.data;\r\n    }\r\n};\r\n  \r\n// services/api.js\r\n\r\nexport const getUsers = async () => {\r\n  try {\r\n    console.log(\"Fetching users...\");\r\n    const response = await axios.get('http://localhost:3002/api/users');\r\n    console.log(\"User data received:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error while fetching users:\", error);\r\n    throw error.response.data;\r\n  }\r\n};\r\n\r\n\r\n"],"names":["Form","_ref","fields","onSubmit","phoneNumber","setPhoneNumber","register","errors","labelButton","showPhoneInput","showCheckboxInput","handleNavigate","labelNavigate","errorMessaage","_jsxs","children","map","field","_jsx","className","htmlFor","name","label","_objectSpread","validation","role","message","PhoneInput","country","value","onChange","inputProps","required","type","id","onClick","RegisterForm","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","error","setError","_useState3","_useState4","_useForm","useForm","handleSubmit","formState","reset","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","formData","response","wrap","_context","prev","next","registerUser","sent","console","log","t0","stop","_x","apply","arguments","pattern","maxLength","registrationData","axios","post","abrupt","status","Error","loginUser","_ref2","_callee2","loginData","_context2","_x2"],"sourceRoot":""}