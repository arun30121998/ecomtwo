{"version":3,"file":"static/js/383.94c045a4.chunk.js","mappings":"iRAOe,SAASA,IAEtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAsCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAKIC,EAAAA,EAAAA,MAJFC,EAAQF,EAARE,SACAC,EAAYH,EAAZG,aACaC,EAAMJ,EAAnBK,UAAaD,OACbE,EAAKN,EAALM,MAEIC,EAAQ,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAI,IAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAKxB,OALwBF,EAAAC,KAAA,EAGlBJ,GAAQM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQP,GAAI,IAAEf,YAAAA,IAE5BmB,EAAAE,KAAA,GACuBE,EAAAA,EAAAA,IAAaP,GAAU,KAAD,EAAvCC,EAAQE,EAAAK,KAEdC,QAAQC,IAAI,+BAAgCT,GAE5CT,IACAP,EAAe,IAAIkB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAGnBM,QAAQ7B,MAAM,yBAAwBuB,EAAAQ,IAChB,4DAAlBR,EAAAQ,GAAMC,SACR/B,EAAS,2DAMV,yBAAAsB,EAAAU,OAAA,GAAAf,EAAA,mBAEJ,gBAxBagB,GAAA,OAAApB,EAAAqB,MAAA,KAAAC,UAAA,KA0Ed,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOC,UACpBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kDAAiDC,SAAA,EAC9DF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mBACJF,EAAAA,EAAAA,KAACI,EAAAA,EAAI,CACHC,OArDW,CACjB,CACEC,KAAM,WACNC,MAAO,cACPC,WAAY,CACVC,SAAU,yBACVC,QAAS,CACPC,MAAO,eACPhB,QAAS,0DAEXiB,UAAW,CACTD,MAAO,GACPhB,QAAS,gDAIf,CACEW,KAAM,QACNC,MAAO,SACPC,WAAY,CACVC,SAAU,oBACVC,QAAS,CACPC,MAAO,oDACPhB,QAAS,wBAEXiB,UAAW,CACTD,MAAO,IACPhB,QAAS,4CAIf,CACEW,KAAM,WACNC,MAAO,YACPC,WAAY,CACVC,SAAU,uBACVC,QAAS,CAEPf,QAAS,oFAEXiB,UAAW,CACTD,MAAO,GACPhB,QAAS,+CAYTnB,SAAUJ,EAAaI,GACvBT,YAAaA,EACbC,eAAgBA,EAChBG,SAAUA,EACVE,OAAQA,EACRwC,YAAY,SACZC,gBAAgB,EAChBC,mBAAmB,EACnBC,cAAc,aACdC,eAAgB,kBAAM5D,EAAS,aAAa,EAC5C6D,cAAevD,IACd,QAKX,C","sources":["Pages/Profile/RegisterForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form } from \"../../Components/Form/DemoForm\";\r\nimport { registerUser } from \"../../services/api\"; // Import the registerUser function\r\nimport { useForm } from \"react-hook-form\";\r\nimport \"./Profile.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n//\r\nexport default function RegisterForm() {\r\n\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState('')\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm();\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      // Include the phone number in the form data\r\n      const formData = { ...data, phoneNumber };\r\n\r\n      // Call the registerUser function and pass the form data to it\r\n      const response = await registerUser(formData);\r\n      // Handle the response from the server\r\n      console.log(\"Form submitted successfully:\", response);\r\n      // You can also display a success message to the user if needed\r\n      reset(); // Reset the form fields to their initial values\r\n      setPhoneNumber(\"\"); \r\n    } catch (error) {\r\n      // Handle any errors that occur during form submission\r\n      console.error(\"Error submitting form:\", error);\r\n      if (error.message === \"User with the same email or phone number already exists\") {\r\n        setError(\"User with the same email or phone number already exists\")\r\n        // Display a message indicating that the user is already registered\r\n        // You can set this message to the 'error' state and display it on the form\r\n      } else {\r\n        // Display a generic error message indicating that something went wrong\r\n        // You can set this message to the 'error' state and display it on the form\r\n      }\r\n    }\r\n  };\r\n\r\n  const formFields = [\r\n    {\r\n      name: \"fullName\",\r\n      label: \"First Name:\",\r\n      validation: {\r\n        required: \"First name is required\",\r\n        pattern: {\r\n          value: /^[A-Za-z]+$/i,\r\n          message: \"First name should contain only alphabetical characters\",\r\n        },\r\n        maxLength: {\r\n          value: 20,\r\n          message: \"First name should not exceed 10 characters\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: \"email\",\r\n      label: \"Email:\",\r\n      validation: {\r\n        required: \"Email is required\",\r\n        pattern: {\r\n          value: /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/i,\r\n          message: \"Invalid email format\",\r\n        },\r\n        maxLength: {\r\n          value: 100,\r\n          message: \"Email should not exceed 100 characters\",\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: \"password\",\r\n      label: \"Password:\",\r\n      validation: {\r\n        required: \"Password is required\",\r\n        pattern: {\r\n          // value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\r\n          message: \"Password must contain at least 8 characters, including both letters and numbers.\",\r\n        },\r\n        maxLength: {\r\n          value: 50, // Adjust the maximum length as per your requirement\r\n          message: \"Password should not exceed 50 characters\",\r\n        },\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className='mt-10'>\r\n      <div className='col-12 col-lg-4  m-auto registration-from-style'>\r\n        <h1>Register Here</h1>\r\n        <Form\r\n          fields={formFields}\r\n          onSubmit={handleSubmit(onSubmit)}\r\n          phoneNumber={phoneNumber}\r\n          setPhoneNumber={setPhoneNumber}\r\n          register={register}\r\n          errors={errors}\r\n          labelButton='Submit'\r\n          showPhoneInput={true}\r\n          showCheckboxInput={true}\r\n          labelNavigate='Login Here'\r\n          handleNavigate={() => navigate(\"/userLogin\")}\r\n          errorMessaage={error}\r\n        />{\" \"}\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n"],"names":["RegisterForm","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","error","setError","_useState3","_useState4","phoneNumber","setPhoneNumber","_useForm","useForm","register","handleSubmit","errors","formState","reset","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","formData","response","wrap","_context","prev","next","_objectSpread","registerUser","sent","console","log","t0","message","stop","_x","apply","arguments","_jsx","className","children","_jsxs","Form","fields","name","label","validation","required","pattern","value","maxLength","labelButton","showPhoneInput","showCheckboxInput","labelNavigate","handleNavigate","errorMessaage"],"sourceRoot":""}